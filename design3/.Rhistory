shiny::runApp('C:/dev/R/tcc')
runApp('C:/dev/R/tcc')
# Installing the shinydashboard package for
#     dashboard functionality
install.packages("shinydashboard")
install.packages("rio")
library(shiny)
library(shinydashboard)
shinyUI(dashboardPage(
dashboardHeader(title = "Maringá Covid-19"),
dashboardSidebar(),
dashboardBody()
))
library(shiny)
library(shinydashboard)
shinyServer(function(input, output) {})
runApp('C:/dev/R/tcc')
runApp('C:/dev/R/tcc')
runApp('C:/dev/R/tcc')
shiny::runApp('C:/dev/R/tcc')
runApp('C:/dev/R/tcc')
runApp('C:/dev/R/tcc')
runApp('C:/dev/R/tcc')
?dashboardHeader()
runApp('C:/dev/R/tcc')
runApp('C:/dev/R/tcc')
shiny::runApp('C:/dev/R/tcc')
runApp('C:/dev/R/tcc')
runApp('C:/dev/R/tcc')
runApp('C:/dev/R/tcc')
runApp('C:/dev/R/tcc')
runApp('C:/dev/R/tcc')
runApp('C:/dev/R/tcc')
?column()
runApp('C:/dev/R/tcc')
runApp('C:/dev/R/tcc')
?column()
runApp('C:/dev/R/tcc')
runApp('C:/dev/R/tcc')
runApp('C:/dev/R/tcc')
?tabItem()
runApp('C:/dev/R/tcc')
runApp('C:/dev/R/tcc')
runApp('C:/dev/R/tcc')
runApp('C:/dev/R/tcc')
runApp('C:/dev/R/tcc')
runApp('C:/dev/R/tcc')
runApp('C:/dev/R/tcc')
runApp('C:/dev/R/tcc')
runApp('C:/dev/R/tcc')
runApp('C:/dev/R/tcc')
runApp('C:/dev/R/tcc')
?plotOutput()
runApp('C:/dev/R/tcc')
runApp('C:/dev/R/tcc')
?box()
runApp('C:/dev/R/tcc')
runApp('C:/dev/R/tcc')
?infoBoxOutput()
?plotOutput()
?infoBoxOutput()
runApp('C:/dev/R/tcc')
?sliderInput()
runApp('C:/dev/R/tcc')
?renderInfoBox()
runApp('C:/dev/R/tcc')
?renderInfoBox()
runApp('C:/dev/R/tcc')
?box()
?column()
runApp('C:/dev/R/tcc')
runApp('C:/dev/R/tcc')
runApp('C:/dev/R/tcc')
shiny::runApp('C:/dev/R/tcc')
runApp('C:/dev/R/tcc')
?infoBox()
runApp('C:/dev/R/tcc')
runApp('C:/dev/R/tcc')
runApp('C:/dev/R/tcc')
runApp('C:/dev/R/tcc')
runApp('C:/dev/R/tcc')
runApp('C:/dev/R/tcc')
runApp('C:/dev/R/tcc')
?infoBox()
runApp('C:/dev/R/tcc')
runApp('C:/dev/R/tcc')
runApp('C:/dev/R/tcc')
runApp('C:/dev/R/tcc')
runApp('C:/dev/R/tcc')
shiny::runApp('C:/dev/R/tcc')
shiny::runApp('C:/dev/R/tcc')
runApp('C:/dev/R/tcc')
runApp('C:/dev/R/tcc')
runApp('C:/dev/R/tcc')
runApp('C:/dev/R/tcc')
?infoBox()
runApp('C:/dev/R/tcc')
?infoBoxOutput()
runApp('C:/dev/R/tcc')
runApp('C:/dev/R/tcc')
runApp('C:/dev/R/tcc')
runApp('C:/dev/R/tcc')
runApp('C:/dev/R/tcc')
runApp('C:/dev/R/tcc')
runApp('C:/dev/R/tcc')
runApp('C:/dev/R/tcc')
runApp('C:/dev/R/tcc')
runApp('C:/dev/R/tcc')
runApp('C:/dev/R/tcc')
runApp('C:/dev/R/tcc')
runApp('C:/dev/R/tcc')
runApp('C:/dev/R/tcc')
runApp('C:/dev/R/tcc')
runApp('C:/dev/R/tcc')
library(rio)
install_formats()
# Verifique se o working directory está correto
getwd()
setwd("C:/dev/R/tcc/design3")
# Carregamento de pacotes necessários
library(shiny)
library(shinydashboard)
library(rio)
library(ggplot2)
library(lubridate)
runApp()
#temp <- ggplot(data = datasXconfirmados, aes(x = data, y = confirmados))
#temp <- temp + geom_line()
#temp
plot(datasXconfirmados$data, datasXconfirmados$confirmados)
runApp()
runApp()
#temp <- ggplot(data = datasXconfirmados, aes(x = data, y = confirmados))
#temp <- temp + geom_line()
#temp
plot(datasXconfirmados$data, datasXconfirmados$confirmados, type = "l", xaxt = "n")
runApp()
runApp()
runApp()
?plot
runApp()
runApp()
runApp()
runApp()
runApp()
?ggplot
temp <- temp + ?geom_line()
?geom_line
?geom_point
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
datasXrecuperados
# Importação e sumarização do dataset
casosCovid <- import("casos_covid_maringa_dataEng.csv")
t1 <- casosCovid[, c("data", "confirmados")]
t2 <- casosCovid[, c("data", "ativos")]
t3 <- casosCovid[, c("data", "recuperados")]
t4 <- casosCovid[, c("data", "obitos")]
t5 <- casosCovid[, c("data", "novos")]
datasXconfirmados       <- t1
datasXconfirmados$data  <- as.Date(t1$data)
View(datasXconfirmados)
datasXativos            <- t2
datasXativos$data       <- as.Date(t2$data)
datasXrecuperados       <- t3
datasXrecuperados$data  <- as.Date(t3$data)
datasXobitos            <- t4
datasXobitos$data       <- as.Date(t4$data)
datasXnovos             <- t5
datasXnovos$data        <- as.Date(t5$data)
runApp()
?sliderInput()
runApp()
runApp()
slice1 <- datasXconfirmados[1:5]
slice1 <- datasXconfirmados[c(1:5)]
slice1 <- datasXconfirmados[c(1:5),]
View(slice1)
runApp()
runApp()
runApp()
runApp()
runApp()
View(casosCovid)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shinyUI(
dashboardPage(
dashboardHeader(title = "Covid-19: Maringá"),
dashboardSidebar(
sidebarMenu(
menuItem("Casos Confirmados x Ativos", tabName = "confirmadosXativos"),
menuItem("Casos Confirmados x Recuperados", tabName = "confirmadosXrecuperados"),
menuItem("Casos Confirmados x Óbitos", tabName = "confirmadosXobitos"),
menuItem("Casos Confirmados x Novos", tabName = "confirmadosXnovos")
)
),
dashboardBody(
# This code is only for disabling vertical scrolling
tags$head(
tags$style(
"body {overflow-y: hidden;}"
)
),
tabItems(
tabItem(tabName = "confirmadosXativos",
fluidRow(box(title = "Casos Confirmados", plotOutput(outputId = "plot11", height = 280), width = 6),
box(title = "Casos Ativos", plotOutput(outputId = "plot12", height = 280), width = 6)
),
fluidRow(column(width = 10, offset = 1,
box(sliderInput(inputId = "slider1", label = "Intervalo de Datas",
min = as.Date("2020-03-17"),
max = as.Date("2021-09-05"),
value = c(as.Date("2020-03-17"), as.Date("2021-09-05"))
),
width = NULL)
)
),
fluidRow(infoBoxOutput(outputId = "infoBox11"),
infoBoxOutput(outputId = "infoBox12"),
infoBoxOutput(outputId = "infoBox13")
)
),
tabItem(tabName = "confirmadosXrecuperados",
fluidRow(box(title = "Casos Confirmados", plotOutput(outputId = "plot21", height = 280), width = 6),
box(title = "Casos Recuperados", plotOutput(outputId = "plot22", height = 280), width = 6)
),
fluidRow(column(width = 10, offset = 1,
box(sliderInput(inputId = "slider2", label = "Intervalo de Datas",
min = 1,
max = 516, value = c(100, 200)), width = NULL))
),
fluidRow(infoBoxOutput(outputId = "infoBox21"),
infoBoxOutput(outputId = "infoBox22"),
infoBoxOutput(outputId = "infoBox23")
)
),
tabItem(tabName = "confirmadosXobitos",
fluidRow(box(title = "Casos Confirmados", plotOutput(outputId = "plot31", height = 280), width = 6),
box(title = "Casos de Óbitos", plotOutput(outputId = "plot32", height = 280), width = 6)
),
fluidRow(column(width = 10, offset = 1, box(sliderInput(inputId = "slider3", label = "Intervalo de Datas", min = 1, max = 516, value = c(100, 200)), width = NULL))
),
fluidRow(infoBoxOutput(outputId = "infoBox31"),
infoBoxOutput(outputId = "infoBox32"),
infoBoxOutput(outputId = "infoBox33")
)
),
tabItem(tabName = "confirmadosXnovos",
fluidRow(box(title = "Casos Confirmados", plotOutput(outputId = "plot41", height = 280), width = 6),
box(title = "Casos Novos", plotOutput(outputId = "plot42", height = 280), width = 6)
),
fluidRow(column(width = 10, offset = 1, box(sliderInput(inputId = "slider4", label = "Intervalo de Datas", min = 1, max = 516, value = c(100, 200), width = NULL))
),
fluidRow(infoBoxOutput(outputId = "infoBox41"),
infoBoxOutput(outputId = "infoBox42"),
infoBoxOutput(outputId = "infoBox43")
)
)
)
)
)
)
)
runApp()
runApp()
runApp()
View(casosCovid)
View(datasXconfirmados)
# "2020-03-20"
datasXconfirmados[datasXconfirmados$data == "2020-03-20", ]
View(datasXnovos)
which(datasXconfirmados$data == "2020-03-20")
runApp()
runApp()
